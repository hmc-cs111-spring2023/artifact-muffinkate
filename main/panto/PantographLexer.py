# Generated from Pantograph.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,16,219,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,
        1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,
        11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,
        18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
        20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,
        23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,
        25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,
        27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,
        29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,
        31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,33,4,33,200,
        8,33,11,33,12,33,201,1,34,4,34,205,8,34,11,34,12,34,206,1,34,1,34,
        1,35,3,35,212,8,35,1,35,1,35,4,35,216,8,35,11,35,12,35,217,0,0,36,
        1,0,3,0,5,0,7,0,9,0,11,0,13,0,15,0,17,0,19,0,21,0,23,0,25,0,27,0,
        29,0,31,0,33,0,35,0,37,0,39,0,41,1,43,2,45,3,47,4,49,5,51,6,53,7,
        55,8,57,9,59,10,61,11,63,12,65,13,67,14,69,15,71,16,1,0,22,2,0,65,
        65,97,97,2,0,66,66,98,98,2,0,67,67,99,99,2,0,68,68,100,100,2,0,69,
        69,101,101,2,0,70,70,102,102,2,0,71,71,103,103,2,0,73,73,105,105,
        2,0,76,76,108,108,2,0,78,78,110,110,2,0,80,80,112,112,2,0,82,82,
        114,114,2,0,86,86,118,118,2,0,87,87,119,119,2,0,83,83,115,115,2,
        0,89,89,121,121,2,0,72,72,104,104,2,0,79,79,111,111,2,0,85,85,117,
        117,2,0,84,84,116,116,1,0,48,57,2,0,9,9,32,32,203,0,41,1,0,0,0,0,
        43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,
        53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,
        63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,1,
        73,1,0,0,0,3,75,1,0,0,0,5,77,1,0,0,0,7,79,1,0,0,0,9,81,1,0,0,0,11,
        83,1,0,0,0,13,85,1,0,0,0,15,87,1,0,0,0,17,89,1,0,0,0,19,91,1,0,0,
        0,21,93,1,0,0,0,23,95,1,0,0,0,25,97,1,0,0,0,27,99,1,0,0,0,29,101,
        1,0,0,0,31,103,1,0,0,0,33,105,1,0,0,0,35,107,1,0,0,0,37,109,1,0,
        0,0,39,111,1,0,0,0,41,113,1,0,0,0,43,124,1,0,0,0,45,129,1,0,0,0,
        47,134,1,0,0,0,49,139,1,0,0,0,51,145,1,0,0,0,53,150,1,0,0,0,55,156,
        1,0,0,0,57,164,1,0,0,0,59,172,1,0,0,0,61,179,1,0,0,0,63,185,1,0,
        0,0,65,192,1,0,0,0,67,199,1,0,0,0,69,204,1,0,0,0,71,215,1,0,0,0,
        73,74,7,0,0,0,74,2,1,0,0,0,75,76,7,1,0,0,76,4,1,0,0,0,77,78,7,2,
        0,0,78,6,1,0,0,0,79,80,7,3,0,0,80,8,1,0,0,0,81,82,7,4,0,0,82,10,
        1,0,0,0,83,84,7,5,0,0,84,12,1,0,0,0,85,86,7,6,0,0,86,14,1,0,0,0,
        87,88,7,7,0,0,88,16,1,0,0,0,89,90,7,8,0,0,90,18,1,0,0,0,91,92,7,
        9,0,0,92,20,1,0,0,0,93,94,7,10,0,0,94,22,1,0,0,0,95,96,7,11,0,0,
        96,24,1,0,0,0,97,98,7,12,0,0,98,26,1,0,0,0,99,100,7,13,0,0,100,28,
        1,0,0,0,101,102,7,14,0,0,102,30,1,0,0,0,103,104,7,15,0,0,104,32,
        1,0,0,0,105,106,7,16,0,0,106,34,1,0,0,0,107,108,7,17,0,0,108,36,
        1,0,0,0,109,110,7,18,0,0,110,38,1,0,0,0,111,112,7,19,0,0,112,40,
        1,0,0,0,113,114,3,21,10,0,114,115,3,23,11,0,115,116,3,35,17,0,116,
        117,3,21,10,0,117,118,3,1,0,0,118,119,3,13,6,0,119,120,3,1,0,0,120,
        121,3,39,19,0,121,122,3,9,4,0,122,123,5,58,0,0,123,42,1,0,0,0,124,
        125,3,7,3,0,125,126,3,23,11,0,126,127,3,1,0,0,127,128,3,27,13,0,
        128,44,1,0,0,0,129,130,3,39,19,0,130,131,3,37,18,0,131,132,3,23,
        11,0,132,133,3,19,9,0,133,46,1,0,0,0,134,135,3,17,8,0,135,136,3,
        9,4,0,136,137,3,11,5,0,137,138,3,39,19,0,138,48,1,0,0,0,139,140,
        3,23,11,0,140,141,3,15,7,0,141,142,3,13,6,0,142,143,3,33,16,0,143,
        144,3,39,19,0,144,50,1,0,0,0,145,146,3,39,19,0,146,147,3,23,11,0,
        147,148,3,37,18,0,148,149,3,9,4,0,149,52,1,0,0,0,150,151,3,11,5,
        0,151,152,3,1,0,0,152,153,3,17,8,0,153,154,3,29,14,0,154,155,3,9,
        4,0,155,54,1,0,0,0,156,157,3,7,3,0,157,158,3,9,4,0,158,159,3,29,
        14,0,159,160,3,15,7,0,160,161,3,13,6,0,161,162,3,19,9,0,162,163,
        5,58,0,0,163,56,1,0,0,0,164,165,3,29,14,0,165,166,3,21,10,0,166,
        167,3,1,0,0,167,168,3,5,2,0,168,169,3,15,7,0,169,170,3,19,9,0,170,
        171,3,13,6,0,171,58,1,0,0,0,172,173,3,35,17,0,173,174,3,11,5,0,174,
        175,3,11,5,0,175,176,3,29,14,0,176,177,3,9,4,0,177,178,3,39,19,0,
        178,60,1,0,0,0,179,180,3,5,2,0,180,181,3,37,18,0,181,182,3,23,11,
        0,182,183,3,25,12,0,183,184,3,9,4,0,184,62,1,0,0,0,185,186,3,23,
        11,0,186,187,3,35,17,0,187,188,3,39,19,0,188,189,3,1,0,0,189,190,
        3,39,19,0,190,191,3,9,4,0,191,64,1,0,0,0,192,193,3,29,14,0,193,194,
        3,5,2,0,194,195,3,1,0,0,195,196,3,17,8,0,196,197,3,9,4,0,197,66,
        1,0,0,0,198,200,7,20,0,0,199,198,1,0,0,0,200,201,1,0,0,0,201,199,
        1,0,0,0,201,202,1,0,0,0,202,68,1,0,0,0,203,205,7,21,0,0,204,203,
        1,0,0,0,205,206,1,0,0,0,206,204,1,0,0,0,206,207,1,0,0,0,207,208,
        1,0,0,0,208,209,6,34,0,0,209,70,1,0,0,0,210,212,5,13,0,0,211,210,
        1,0,0,0,211,212,1,0,0,0,212,213,1,0,0,0,213,216,5,10,0,0,214,216,
        5,13,0,0,215,211,1,0,0,0,215,214,1,0,0,0,216,217,1,0,0,0,217,215,
        1,0,0,0,217,218,1,0,0,0,218,72,1,0,0,0,6,0,201,206,211,215,217,1,
        6,0,0
    ]

class PantographLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PROPAGATE = 1
    DRAW = 2
    TURN = 3
    LEFT = 4
    RIGHT = 5
    TRUE = 6
    FALSE = 7
    DESIGN = 8
    SPACING = 9
    OFFSET = 10
    CURVE = 11
    ROTATE = 12
    SCALE = 13
    NUMBER = 14
    WHITESPACE = 15
    NEWLINE = 16

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
 ]

    symbolicNames = [ "<INVALID>",
            "PROPAGATE", "DRAW", "TURN", "LEFT", "RIGHT", "TRUE", "FALSE", 
            "DESIGN", "SPACING", "OFFSET", "CURVE", "ROTATE", "SCALE", "NUMBER", 
            "WHITESPACE", "NEWLINE" ]

    ruleNames = [ "A", "B", "C", "D", "E", "F", "G", "I", "L", "N", "P", 
                  "R", "V", "W", "S", "Y", "H", "O", "U", "T", "PROPAGATE", 
                  "DRAW", "TURN", "LEFT", "RIGHT", "TRUE", "FALSE", "DESIGN", 
                  "SPACING", "OFFSET", "CURVE", "ROTATE", "SCALE", "NUMBER", 
                  "WHITESPACE", "NEWLINE" ]

    grammarFileName = "Pantograph.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


